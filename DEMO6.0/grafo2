<!DOCTYPE html>
<html>
<head>
    <title>Pannello interattivo</title>
    <style>
        #canvas {
            border: 1px solid #ccc;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <canvas id="canvas" width="400" height="400"></canvas>

    <form id="nodeForm">
        <label for="nodeName">Nome nodo:</label>
        <input type="text" id="nodeName" required>
        <button type="submit">Aggiungi nodo</button>
    </form>

    <form id="edgeForm">
        <label for="sourceNode">Nodo sorgente:</label>
        <select id="sourceNode" required></select>
        <label for="destinationNode">Nodo destinazione:</label>
        <select id="destinationNode" required></select>
        <input type="checkbox" id="oriented" value="oriented">
        <label for="oriented">Arco orientato</label>
        <button type="submit">Aggiungi arco</button>
    </form>

    <script>
        var canvas = document.getElementById("canvas");
        var ctx = canvas.getContext("2d");

        var graph = {
            nodes: [],
            edges: []
        };

        document.getElementById("nodeForm").addEventListener("submit", addNode);
        document.getElementById("edgeForm").addEventListener("submit", addEdge);

        function addNode(e) {
            e.preventDefault();
            var nodeName = document.getElementById("nodeName").value;
            var newNode = {
                name: nodeName,
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                radius: 20
            };
            graph.nodes.push(newNode);
            drawGraph();
            resetNodeForm();
            updateNodeSelectOptions();
        }

        function addEdge(e) {
            e.preventDefault();
            var sourceNodeIndex = document.getElementById("sourceNode").value;
            var destinationNodeIndex = document.getElementById("destinationNode").value;
            var oriented = document.getElementById("oriented").checked;
            var newEdge = {
                startNodeIndex: parseInt(sourceNodeIndex),
                endNodeIndex: parseInt(destinationNodeIndex),
                oriented: oriented
            };
            graph.edges.push(newEdge);
            drawGraph();
            resetEdgeForm();
        }

        function drawGraph() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Disegna i nodi
            for (var i = 0; i < graph.nodes.length; i++) {
                var node = graph.nodes[i];
                ctx.beginPath();
                ctx.arc(node.x, node.y, node.radius, 0, 2 * Math.PI);
                ctx.fillStyle = "#ff0000";
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = "#000000";
                ctx.fillText(node.name, node.x - node.radius / 2, node.y + node.radius + 12);
            }

            // Disegna gli archi
            for (var i = 0; i < graph.edges.length; i++) {
                var edge = graph.edges[i];
                var startNode = graph.nodes[edge.startNodeIndex];
                var endNode = graph.nodes[edge.endNodeIndex];

                ctx.beginPath();
                ctx.moveTo(startNode.x, startNode.y);
                ctx.lineTo(endNode.x, endNode.y);
                ctx.stroke();

                if (edge.oriented) {
                    var angle = Math.atan2(endNode.y - startNode.y, endNode.x - startNode.x);
                    var arrowLength = 10;

                    var arrowEndX = endNode.x - arrowLength * Math.cos(angle);
                    var arrowEndY = endNode.y - arrowLength * Math.sin(angle);

                    ctx.save();
                    ctx.translate(arrowEndX, arrowEndY);
                    ctx.rotate(angle);

                    ctx.beginPath();
                    ctx.moveTo(0, 0);
                    ctx.lineTo(-5, -2);
                    ctx.lineTo(-5, 2);
                    ctx.closePath();
                    ctx.fillStyle = "#000";
                    ctx.fill();

                    ctx.restore();
                }
            }
        }

        function resetNodeForm() {
            document.getElementById("nodeName").value = "";
        }

        function resetEdgeForm() {
            document.getElementById("sourceNode").selectedIndex = 0;
            document.getElementById("destinationNode").selectedIndex = 0;
            document.getElementById("oriented").checked = false;
        }

        function updateNodeSelectOptions() {
            var sourceNodeSelect = document.getElementById("sourceNode");
            var destinationNodeSelect = document.getElementById("destinationNode");

            sourceNodeSelect.innerHTML = "";
            destinationNodeSelect.innerHTML = "";

            for (var i = 0; i < graph.nodes.length; i++) {
                var nodeOption = document.createElement("option");
                nodeOption.value = i;
                nodeOption.textContent = graph.nodes[i].name;
                sourceNodeSelect.appendChild(nodeOption);

                var destinationOption = document.createElement("option");
                destinationOption.value = i;
                destinationOption.textContent = graph.nodes[i].name;
                destinationNodeSelect.appendChild(destinationOption);
            }
        }

        drawGraph();
    </script>
</body>
</html>
